{"version":3,"sources":["components/Header/Header.jsx","components/Exercises/ExerciseItem.jsx","components/Exercises/ExercisesList.jsx","components/Exercises/ExercisesContainer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","ExerciseItem","_ref","_ref$exercise","exercise","title","times","done","exerciseId","toggleCheckbox","checkboxClasses","concat","es5","checked","onChange","ExercisesList","_this$props","this","props","exercises","exercisesPairs","toPairs","header","length","map","_ref2","Object","slicedToArray","key","value","Exercises_ExerciseItem","Component","mockExercises","1","order","2","3","4","5","6","7","ExercisesContainer","state","toggleCheckboxHandler","_callee","id","regenerator_default","wrap","_context","prev","next","_this","setState","prevState","objectSpread","defineProperty","localStorage","setItem","JSON","stringify","stop","exercisesFromLocalStorage","getItem","parsedExervises","Boolean","parse","Exercises_ExercisesList","App","document","Row","components_Header_Header","Exercises_ExercisesContainer","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50c7dee9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./header.css\";\n\nconst Header = () => <div className=\"main-header container\">Stronglify</div>;\n\nexport default Header;\n","import React from \"react\";\nimport { Checkbox } from \"element-react\";\nimport \"./exercises.css\";\n\nconst ExerciseItem = ({\n  exercise: { title, times, done },\n  exerciseId,\n  toggleCheckbox\n}) => {\n  const checkboxClasses = `exercises__checkbox ${\n    done ? \"exercises__checkbox--crossouted\" : \"\"\n  }`;\n\n  return (\n    <li className=\"exercises__list-item\">\n      <div className=\"exercises__list-item-right\">\n        <Checkbox\n          className={checkboxClasses}\n          checked={done}\n          onChange={() => toggleCheckbox(exerciseId)}\n        >\n          {title}\n        </Checkbox>\n      </div>\n      <div className=\"exercises__list-item-left\">\n        <span>{times}</span>\n      </div>\n    </li>\n  );\n};\n\nexport default ExerciseItem;\n","import React, { Component } from \"react\";\nimport propTypes from \"prop-types\";\nimport { Card } from \"element-react\";\nimport \"./exercises.css\";\n\nimport { toPairs } from \"ramda\";\n\nimport ExerciseItem from \"./ExerciseItem\";\n\nclass ExercisesList extends Component {\n  render() {\n    const { exercises, toggleCheckbox } = this.props;\n\n    const exercisesPairs = toPairs(exercises);\n\n    return (\n      <Card className=\"exercises__card\" header={<h2>Day 1</h2>}>\n        <ul>\n          {exercisesPairs.length\n            ? exercisesPairs.map(([key, value]) => (\n                <ExerciseItem\n                  key={key}\n                  exercise={value}\n                  exerciseId={key}\n                  toggleCheckbox={toggleCheckbox}\n                />\n              ))\n            : \"no data :)\"}\n        </ul>\n      </Card>\n    );\n  }\n}\n\nExercisesList.propTypes = {\n  exercises: propTypes.object.isRequired,\n  toggleCheckbox: propTypes.func\n};\n\nexport default ExercisesList;\n","import React, { Component } from \"react\";\n\nimport ExercisesList from \"./ExercisesList\";\n\nconst mockExercises = {\n  1: {\n    title: \"Скручивания на наклонной лавке\",\n    times: \"3х10-15\",\n    order: 1,\n    done: false\n  },\n  2: {\n    title: \"Приседания со штангой\",\n    times: \"4-5х6-10\",\n    order: 2,\n    done: false\n  },\n  3: {\n    title: \"Жим ногами в тренажёре\",\n    times: \"3-4х8-12\",\n    order: 3,\n    done: false\n  },\n  4: {\n    title: \"Сгибание ног в тренажёре лёжа\",\n    times: \"3х10-15\",\n    order: 4,\n    done: false\n  },\n  5: {\n    title: \"Жим штанги с груди стоя\",\n    times: \"4х6-10\",\n    order: 5,\n    done: false\n  },\n  6: {\n    title: \"Жим гантелей сидя\",\n    times: \"3-4х8-12\",\n    order: 6,\n    done: false\n  },\n  7: {\n    title: \"Махи гантелями в стороны\",\n    times: \"3x10-15\",\n    order: 7,\n    done: false\n  }\n};\n\nclass ExercisesContainer extends Component {\n  state = {\n    exercises: mockExercises\n  };\n\n  componentDidMount() {\n    const exercisesFromLocalStorage = localStorage.getItem(\"exercises\");\n    const parsedExervises = Boolean(exercisesFromLocalStorage)\n      ? JSON.parse(exercisesFromLocalStorage)\n      : mockExercises;\n\n    this.setState(() => ({\n      exercises: parsedExervises || mockExercises\n    }));\n  }\n\n  toggleCheckboxHandler = async id => {\n    await this.setState(prevState => ({\n      exercises: {\n        ...prevState.exercises,\n        [id]: {\n          ...prevState.exercises[id],\n          done: !prevState.exercises[id].done\n        }\n      }\n    }));\n\n    localStorage.setItem(\"exercises\", JSON.stringify(this.state.exercises));\n  };\n\n  render() {\n    return (\n      <div className=\"exercises container\">\n        <ExercisesList\n          exercises={this.state.exercises}\n          toggleCheckbox={this.toggleCheckboxHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ExercisesContainer;\n","import React, { Component } from \"react\";\nimport { Layout } from \"element-react\";\n\nimport Header from \"./components/Header/Header\";\nimport ExerciseContainer from \"./components/Exercises/ExercisesContainer\";\n\nclass App extends Component {\n  componentDidMount() {\n    document.title = \"Stronglify\";\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Layout.Row>\n          <Header />\n        </Layout.Row>\n        <Layout.Row>\n          <main>\n            <ExerciseContainer />\n          </main>\n        </Layout.Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"element-theme-default\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}